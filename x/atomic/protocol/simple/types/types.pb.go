// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/atomic/simple/types.proto

package types

import (
	fmt "fmt"
	github_com_datachainlab_cross_x_core_tx_types "github.com/datachainlab/cross/x/core/tx/types"
	types "github.com/datachainlab/cross/x/core/tx/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommitStatus int32

const (
	COMMIT_STATUS_UNKNOWN CommitStatus = 0
	COMMIT_STATUS_OK      CommitStatus = 1
	COMMIT_STATUS_FAILED  CommitStatus = 2
)

var CommitStatus_name = map[int32]string{
	0: "COMMIT_STATUS_UNKNOWN",
	1: "COMMIT_STATUS_OK",
	2: "COMMIT_STATUS_FAILED",
}

var CommitStatus_value = map[string]int32{
	"COMMIT_STATUS_UNKNOWN": 0,
	"COMMIT_STATUS_OK":      1,
	"COMMIT_STATUS_FAILED":  2,
}

func (x CommitStatus) String() string {
	return proto.EnumName(CommitStatus_name, int32(x))
}

func (CommitStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3027e825f7ea6c51, []int{0}
}

type PacketDataCall struct {
	TxId github_com_datachainlab_cross_x_core_tx_types.TxID `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,casttype=github.com/datachainlab/cross/x/core/tx/types.TxID" json:"tx_id,omitempty"`
	Tx   types.ResolvedContractTransaction                  `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
}

func (m *PacketDataCall) Reset()         { *m = PacketDataCall{} }
func (m *PacketDataCall) String() string { return proto.CompactTextString(m) }
func (*PacketDataCall) ProtoMessage()    {}
func (*PacketDataCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_3027e825f7ea6c51, []int{0}
}
func (m *PacketDataCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketDataCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketDataCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketDataCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketDataCall.Merge(m, src)
}
func (m *PacketDataCall) XXX_Size() int {
	return m.Size()
}
func (m *PacketDataCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketDataCall.DiscardUnknown(m)
}

var xxx_messageInfo_PacketDataCall proto.InternalMessageInfo

type PacketAcknowledgementCall struct {
	Status CommitStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cross.atomic.simple.CommitStatus" json:"status,omitempty"`
}

func (m *PacketAcknowledgementCall) Reset()         { *m = PacketAcknowledgementCall{} }
func (m *PacketAcknowledgementCall) String() string { return proto.CompactTextString(m) }
func (*PacketAcknowledgementCall) ProtoMessage()    {}
func (*PacketAcknowledgementCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_3027e825f7ea6c51, []int{1}
}
func (m *PacketAcknowledgementCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketAcknowledgementCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketAcknowledgementCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketAcknowledgementCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketAcknowledgementCall.Merge(m, src)
}
func (m *PacketAcknowledgementCall) XXX_Size() int {
	return m.Size()
}
func (m *PacketAcknowledgementCall) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketAcknowledgementCall.DiscardUnknown(m)
}

var xxx_messageInfo_PacketAcknowledgementCall proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cross.atomic.simple.CommitStatus", CommitStatus_name, CommitStatus_value)
	proto.RegisterType((*PacketDataCall)(nil), "cross.atomic.simple.PacketDataCall")
	proto.RegisterType((*PacketAcknowledgementCall)(nil), "cross.atomic.simple.PacketAcknowledgementCall")
}

func init() { proto.RegisterFile("cross/atomic/simple/types.proto", fileDescriptor_3027e825f7ea6c51) }

var fileDescriptor_3027e825f7ea6c51 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x67, 0x96, 0xb5, 0x87, 0xb1, 0x94, 0x10, 0x23, 0x6c, 0xf7, 0x30, 0xa9, 0x05, 0xa1,
	0x78, 0x98, 0xc0, 0x0a, 0x82, 0x7f, 0x2e, 0xbb, 0x59, 0x85, 0xb0, 0x76, 0x57, 0xb2, 0x29, 0x42,
	0x11, 0xc2, 0xec, 0x64, 0x48, 0x43, 0x93, 0xcc, 0x92, 0x79, 0xab, 0xe3, 0x37, 0xf0, 0xe8, 0x47,
	0x28, 0xf8, 0x65, 0xf6, 0xd8, 0xa3, 0xa7, 0xa2, 0xbb, 0x17, 0x3f, 0x83, 0x27, 0x31, 0x53, 0xb0,
	0x0b, 0x42, 0x6f, 0xe1, 0x7d, 0x7e, 0xf9, 0xf1, 0xf0, 0xbe, 0x43, 0x7c, 0xd1, 0x28, 0xad, 0x03,
	0x0e, 0xaa, 0x2a, 0x44, 0xa0, 0x8b, 0x6a, 0x59, 0xca, 0x00, 0x3e, 0x2f, 0xa5, 0x66, 0xcb, 0x46,
	0x81, 0x72, 0x1f, 0xb4, 0x00, 0xb3, 0x00, 0xb3, 0x40, 0xdf, 0xcb, 0x55, 0xae, 0xda, 0x3c, 0xf8,
	0xfb, 0x65, 0xd1, 0xbe, 0x67, 0x5d, 0x60, 0x6e, 0x0b, 0x0e, 0x2f, 0x31, 0xd9, 0x7b, 0xc7, 0xc5,
	0xb9, 0x84, 0x31, 0x07, 0x1e, 0xf2, 0xb2, 0x74, 0x27, 0xe4, 0x1e, 0x98, 0xb4, 0xc8, 0x7a, 0xf8,
	0x00, 0x1f, 0xed, 0x8e, 0x9e, 0xfd, 0xbe, 0xf6, 0x07, 0x79, 0x01, 0x67, 0x17, 0x0b, 0x26, 0x54,
	0x15, 0x64, 0x1c, 0xb8, 0x38, 0xe3, 0x45, 0x5d, 0xf2, 0x45, 0x60, 0x9d, 0x26, 0x10, 0xaa, 0x91,
	0xff, 0xd4, 0x89, 0x89, 0xc6, 0x71, 0x17, 0x4c, 0x94, 0xb9, 0x2f, 0x49, 0x07, 0x4c, 0xaf, 0x73,
	0x80, 0x8f, 0xee, 0x0f, 0x1e, 0x33, 0xdb, 0x16, 0x0c, 0x8b, 0xa5, 0x56, 0xe5, 0x47, 0x99, 0x85,
	0xaa, 0x86, 0x86, 0x0b, 0x48, 0x1a, 0x5e, 0x6b, 0x2e, 0xa0, 0x50, 0xf5, 0xa8, 0xbb, 0xba, 0xf6,
	0x51, 0xdc, 0x01, 0xf3, 0xa2, 0xfb, 0xeb, 0xd2, 0x47, 0x87, 0x1f, 0xc8, 0xbe, 0x6d, 0x38, 0x14,
	0xe7, 0xb5, 0xfa, 0x54, 0xca, 0x2c, 0x97, 0x95, 0xac, 0xa1, 0x2d, 0xfb, 0x9c, 0xec, 0x68, 0xe0,
	0x70, 0xa1, 0xdb, 0xb6, 0x7b, 0x83, 0x47, 0xec, 0x3f, 0x1b, 0x61, 0xa1, 0xaa, 0xaa, 0x02, 0xe6,
	0x2d, 0x18, 0xdf, 0xfc, 0x60, 0xed, 0x4f, 0x52, 0xb2, 0x7b, 0x3b, 0x75, 0xf7, 0xc9, 0xc3, 0x70,
	0x76, 0x7c, 0x1c, 0x25, 0xe9, 0x3c, 0x19, 0x26, 0x27, 0xf3, 0xf4, 0x64, 0x3a, 0x99, 0xce, 0xde,
	0x4f, 0x1d, 0xe4, 0x7a, 0xc4, 0xd9, 0x8e, 0x66, 0x13, 0x07, 0xbb, 0x3d, 0xe2, 0x6d, 0x4f, 0xdf,
	0x0c, 0xa3, 0xb7, 0xaf, 0xc7, 0x4e, 0xa7, 0xdf, 0xfd, 0xf2, 0x8d, 0xa2, 0xd1, 0xe9, 0xea, 0x27,
	0x45, 0xab, 0x35, 0xc5, 0x57, 0x6b, 0x8a, 0x7f, 0xac, 0x29, 0xfe, 0xba, 0xa1, 0xe8, 0x6a, 0x43,
	0xd1, 0xf7, 0x0d, 0x45, 0xa7, 0xaf, 0xee, 0xda, 0xec, 0xcd, 0xed, 0xdb, 0x6b, 0x09, 0x55, 0x6e,
	0x3d, 0x82, 0xc5, 0x4e, 0x3b, 0x7e, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x29, 0x6a, 0x7e,
	0x28, 0x02, 0x00, 0x00,
}

func (m *PacketDataCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketDataCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketDataCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketAcknowledgementCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketAcknowledgementCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketAcknowledgementCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketDataCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PacketAcknowledgementCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketDataCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketDataCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketDataCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = append(m.TxId[:0], dAtA[iNdEx:postIndex]...)
			if m.TxId == nil {
				m.TxId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketAcknowledgementCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketAcknowledgementCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketAcknowledgementCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CommitStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
