// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/core/initiator/packets.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	github_com_datachainlab_cross_x_core_account_types "github.com/datachainlab/cross/x/core/account/types"
	github_com_datachainlab_cross_x_core_tx_types "github.com/datachainlab/cross/x/core/tx/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketDataIBCSignTx struct {
	TxID    github_com_datachainlab_cross_x_core_tx_types.TxID             `protobuf:"bytes,1,opt,name=txID,proto3,casttype=github.com/datachainlab/cross/x/core/tx/types.TxID" json:"txID,omitempty"`
	Signers []github_com_datachainlab_cross_x_core_account_types.AccountID `protobuf:"bytes,2,rep,name=signers,proto3,casttype=github.com/datachainlab/cross/x/core/account/types.AccountID" json:"signers,omitempty"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types.Height `protobuf:"bytes,3,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,4,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *PacketDataIBCSignTx) Reset()         { *m = PacketDataIBCSignTx{} }
func (m *PacketDataIBCSignTx) String() string { return proto.CompactTextString(m) }
func (*PacketDataIBCSignTx) ProtoMessage()    {}
func (*PacketDataIBCSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_35bce7f15afb7b14, []int{0}
}
func (m *PacketDataIBCSignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketDataIBCSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketDataIBCSignTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketDataIBCSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketDataIBCSignTx.Merge(m, src)
}
func (m *PacketDataIBCSignTx) XXX_Size() int {
	return m.Size()
}
func (m *PacketDataIBCSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketDataIBCSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_PacketDataIBCSignTx proto.InternalMessageInfo

type PacketAcknowledgementIBCSignTx struct {
	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PacketAcknowledgementIBCSignTx) Reset()         { *m = PacketAcknowledgementIBCSignTx{} }
func (m *PacketAcknowledgementIBCSignTx) String() string { return proto.CompactTextString(m) }
func (*PacketAcknowledgementIBCSignTx) ProtoMessage()    {}
func (*PacketAcknowledgementIBCSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_35bce7f15afb7b14, []int{1}
}
func (m *PacketAcknowledgementIBCSignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketAcknowledgementIBCSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketAcknowledgementIBCSignTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketAcknowledgementIBCSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketAcknowledgementIBCSignTx.Merge(m, src)
}
func (m *PacketAcknowledgementIBCSignTx) XXX_Size() int {
	return m.Size()
}
func (m *PacketAcknowledgementIBCSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketAcknowledgementIBCSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_PacketAcknowledgementIBCSignTx proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PacketDataIBCSignTx)(nil), "cross.core.initiator.PacketDataIBCSignTx")
	proto.RegisterType((*PacketAcknowledgementIBCSignTx)(nil), "cross.core.initiator.PacketAcknowledgementIBCSignTx")
}

func init() {
	proto.RegisterFile("cross/core/initiator/packets.proto", fileDescriptor_35bce7f15afb7b14)
}

var fileDescriptor_35bce7f15afb7b14 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x93, 0xf6, 0x54, 0x24, 0xd3, 0x22, 0x08, 0x05, 0x45, 0x27, 0x70, 0x4e, 0x99, 0x6e,
	0x8a, 0xd5, 0x82, 0x18, 0x2a, 0x84, 0x68, 0xb8, 0x81, 0x30, 0xa1, 0x70, 0x53, 0x17, 0x70, 0x5c,
	0x2b, 0xb1, 0x9a, 0xd8, 0x51, 0xfc, 0x52, 0xd2, 0x6f, 0xc1, 0x47, 0xe0, 0xe3, 0xdc, 0xd8, 0x91,
	0x29, 0x82, 0xbb, 0x85, 0x11, 0x75, 0xec, 0x84, 0xce, 0xce, 0xb5, 0xea, 0xd6, 0x29, 0xef, 0x3d,
	0xfd, 0xde, 0x2f, 0xc9, 0x5f, 0x0f, 0x85, 0xac, 0x51, 0x5a, 0x13, 0xa6, 0x1a, 0x4e, 0x84, 0x14,
	0x20, 0x28, 0xa8, 0x86, 0xd4, 0x94, 0x9d, 0x71, 0xd0, 0x51, 0xdd, 0x28, 0x50, 0xde, 0xbe, 0x61,
	0xa2, 0x35, 0x13, 0xdd, 0x30, 0xe3, 0xfd, 0x5c, 0xe5, 0xca, 0x00, 0x64, 0x5d, 0x59, 0x76, 0x1c,
	0x88, 0x8c, 0x59, 0x1b, 0x2b, 0x05, 0x97, 0x40, 0xce, 0x0f, 0x86, 0xca, 0x02, 0xe1, 0xbf, 0x2d,
	0xf4, 0xf4, 0xb3, 0xd1, 0xcf, 0x28, 0xd0, 0x24, 0xfe, 0xf0, 0x45, 0xe4, 0x72, 0xde, 0x79, 0x9f,
	0xd0, 0x08, 0xba, 0x64, 0xe6, 0xbb, 0x13, 0x77, 0xba, 0x1b, 0xbf, 0xb9, 0xee, 0x83, 0xc3, 0x5c,
	0x40, 0xd1, 0x66, 0x11, 0x53, 0x15, 0x39, 0xa5, 0x40, 0x59, 0x41, 0x85, 0x2c, 0x69, 0x46, 0xec,
	0x27, 0x77, 0xf6, 0x35, 0xd0, 0x11, 0xb8, 0xa8, 0xb9, 0x8e, 0xe6, 0x5d, 0x32, 0x4b, 0x8d, 0xc3,
	0x3b, 0x41, 0x0f, 0xb4, 0xc8, 0x25, 0x6f, 0xb4, 0xbf, 0x35, 0xd9, 0x9e, 0xee, 0xc6, 0xef, 0xaf,
	0xfb, 0xe0, 0xed, 0xbd, 0x74, 0x94, 0x31, 0xd5, 0x4a, 0x18, 0x9c, 0xc7, 0xb6, 0x4b, 0x66, 0xe9,
	0x46, 0xe8, 0x7d, 0x43, 0x8f, 0x40, 0x54, 0x5c, 0xb5, 0xf0, 0xb5, 0xe0, 0x22, 0x2f, 0xc0, 0xdf,
	0x9e, 0xb8, 0xd3, 0x87, 0x87, 0xe3, 0x48, 0x64, 0xcc, 0x66, 0x34, 0xfc, 0xef, 0xf9, 0x41, 0xf4,
	0xd1, 0x10, 0xf1, 0xcb, 0x45, 0x1f, 0x38, 0x57, 0x7d, 0xf0, 0xec, 0x82, 0x56, 0xe5, 0x51, 0x78,
	0x77, 0x3f, 0x4c, 0xf7, 0x86, 0x81, 0xa5, 0xbd, 0x04, 0x3d, 0xd9, 0x10, 0xeb, 0xa7, 0x06, 0x5a,
	0xd5, 0xfe, 0x68, 0xe2, 0x4e, 0x47, 0xf1, 0x8b, 0xab, 0x3e, 0xf0, 0xef, 0x4a, 0x6e, 0x90, 0x30,
	0x7d, 0x3c, 0xcc, 0xe6, 0x9b, 0xd1, 0xd1, 0xe8, 0xef, 0xcf, 0xc0, 0x09, 0xdf, 0x21, 0x6c, 0x13,
	0x3f, 0x66, 0x67, 0x52, 0x7d, 0x2f, 0xf9, 0x69, 0xce, 0x2b, 0x2e, 0xe1, 0x36, 0xfc, 0xe7, 0x68,
	0x47, 0x03, 0x85, 0x56, 0x9b, 0xf8, 0xf7, 0xd2, 0xa1, 0xb3, 0xfb, 0x71, 0xba, 0xf8, 0x83, 0x9d,
	0xc5, 0x12, 0xbb, 0x97, 0x4b, 0xec, 0xfe, 0x5e, 0x62, 0xf7, 0xc7, 0x0a, 0x3b, 0x97, 0x2b, 0xec,
	0xfc, 0x5a, 0x61, 0xe7, 0xe4, 0xf5, 0xbd, 0x72, 0xbd, 0xbd, 0x2d, 0x93, 0x6c, 0xb6, 0x63, 0xae,
	0xe1, 0xd5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x9f, 0x0b, 0x1b, 0x80, 0x02, 0x00, 0x00,
}

func (m *PacketDataIBCSignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketDataIBCSignTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketDataIBCSignTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintPackets(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPackets(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintPackets(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintPackets(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketAcknowledgementIBCSignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketAcknowledgementIBCSignTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketAcknowledgementIBCSignTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintPackets(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPackets(dAtA []byte, offset int, v uint64) int {
	offset -= sovPackets(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketDataIBCSignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovPackets(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovPackets(uint64(l))
		}
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovPackets(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovPackets(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *PacketAcknowledgementIBCSignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovPackets(uint64(m.Status))
	}
	return n
}

func sovPackets(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPackets(x uint64) (n int) {
	return sovPackets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketDataIBCSignTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketDataIBCSignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketDataIBCSignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPackets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = append(m.TxID[:0], dAtA[iNdEx:postIndex]...)
			if m.TxID == nil {
				m.TxID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPackets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPackets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPackets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPackets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketAcknowledgementIBCSignTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketAcknowledgementIBCSignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketAcknowledgementIBCSignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPackets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPackets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPackets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPackets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPackets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPackets
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPackets
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPackets
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPackets        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPackets          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPackets = fmt.Errorf("proto: unexpected end of group")
)
