// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/core/initiator/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_datachainlab_cross_x_core_account_types "github.com/datachainlab/cross/x/core/account/types"
	types2 "github.com/datachainlab/cross/x/core/account/types"
	github_com_datachainlab_cross_x_core_tx_types "github.com/datachainlab/cross/x/core/tx/types"
	types1 "github.com/datachainlab/cross/x/core/tx/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/tendermint/tendermint/abci/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitiateTxStatus int32

const (
	INITIATE_TX_STATUS_UNKNOWN  InitiateTxStatus = 0
	INITIATE_TX_STATUS_PENDING  InitiateTxStatus = 1
	INITIATE_TX_STATUS_VERIFIED InitiateTxStatus = 2
)

var InitiateTxStatus_name = map[int32]string{
	0: "INITIATE_TX_STATUS_UNKNOWN",
	1: "INITIATE_TX_STATUS_PENDING",
	2: "INITIATE_TX_STATUS_VERIFIED",
}

var InitiateTxStatus_value = map[string]int32{
	"INITIATE_TX_STATUS_UNKNOWN":  0,
	"INITIATE_TX_STATUS_PENDING":  1,
	"INITIATE_TX_STATUS_VERIFIED": 2,
}

func (x InitiateTxStatus) String() string {
	return proto.EnumName(InitiateTxStatus_name, int32(x))
}

func (InitiateTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8a6f064a72728169, []int{0}
}

type ContractTransaction struct {
	CrossChainChannel *types.Any                                                     `protobuf:"bytes,1,opt,name=cross_chain_channel,json=crossChainChannel,proto3" json:"cross_chain_channel,omitempty"`
	Signers           []github_com_datachainlab_cross_x_core_account_types.AccountID `protobuf:"bytes,2,rep,name=signers,proto3,casttype=github.com/datachainlab/cross/x/core/account/types.AccountID" json:"signers,omitempty"`
	CallInfo          github_com_datachainlab_cross_x_core_tx_types.ContractCallInfo `protobuf:"bytes,3,opt,name=call_info,json=callInfo,proto3,casttype=github.com/datachainlab/cross/x/core/tx/types.ContractCallInfo" json:"call_info,omitempty"`
	ReturnValue       *types1.ReturnValue                                            `protobuf:"bytes,4,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	Links             []Link                                                         `protobuf:"bytes,5,rep,name=links,proto3" json:"links"`
}

func (m *ContractTransaction) Reset()         { *m = ContractTransaction{} }
func (m *ContractTransaction) String() string { return proto.CompactTextString(m) }
func (*ContractTransaction) ProtoMessage()    {}
func (*ContractTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6f064a72728169, []int{0}
}
func (m *ContractTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractTransaction.Merge(m, src)
}
func (m *ContractTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ContractTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ContractTransaction proto.InternalMessageInfo

type Link struct {
	SrcIndex uint32 `protobuf:"varint,1,opt,name=src_index,json=srcIndex,proto3" json:"src_index,omitempty"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6f064a72728169, []int{1}
}
func (m *Link) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Link.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return m.Size()
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

type InitiateTxState struct {
	Status           InitiateTxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cross.core.initiator.InitiateTxStatus" json:"status,omitempty"`
	RemainingSigners []types2.Account `protobuf:"bytes,2,rep,name=remaining_signers,json=remainingSigners,proto3" json:"remaining_signers"`
}

func (m *InitiateTxState) Reset()         { *m = InitiateTxState{} }
func (m *InitiateTxState) String() string { return proto.CompactTextString(m) }
func (*InitiateTxState) ProtoMessage()    {}
func (*InitiateTxState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6f064a72728169, []int{2}
}
func (m *InitiateTxState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitiateTxState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitiateTxState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitiateTxState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateTxState.Merge(m, src)
}
func (m *InitiateTxState) XXX_Size() int {
	return m.Size()
}
func (m *InitiateTxState) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateTxState.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateTxState proto.InternalMessageInfo

type GenesisState struct {
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a6f064a72728169, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cross.core.initiator.InitiateTxStatus", InitiateTxStatus_name, InitiateTxStatus_value)
	proto.RegisterType((*ContractTransaction)(nil), "cross.core.initiator.ContractTransaction")
	proto.RegisterType((*Link)(nil), "cross.core.initiator.Link")
	proto.RegisterType((*InitiateTxState)(nil), "cross.core.initiator.InitiateTxState")
	proto.RegisterType((*GenesisState)(nil), "cross.core.initiator.GenesisState")
}

func init() { proto.RegisterFile("cross/core/initiator/types.proto", fileDescriptor_8a6f064a72728169) }

var fileDescriptor_8a6f064a72728169 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xb1, 0x6f, 0xd3, 0x4e,
	0x18, 0xb5, 0x9b, 0xb4, 0xbf, 0xf6, 0x9a, 0x5f, 0x49, 0xdd, 0x0e, 0xa9, 0x23, 0x39, 0x51, 0x91,
	0x50, 0xc5, 0x60, 0x4b, 0x05, 0x31, 0x20, 0xa8, 0x48, 0xd2, 0x50, 0x19, 0x90, 0x41, 0x8e, 0x5b,
	0x50, 0x17, 0xeb, 0x72, 0xbd, 0xba, 0xa7, 0xba, 0x77, 0xd5, 0xdd, 0x19, 0x25, 0xff, 0x01, 0x23,
	0x3b, 0x0b, 0x12, 0x03, 0xff, 0x4a, 0xc7, 0x8e, 0x4c, 0x15, 0x34, 0x0b, 0x7f, 0x43, 0x27, 0xe4,
	0xb3, 0x13, 0xdc, 0x28, 0x48, 0x5d, 0x2c, 0x7f, 0x7a, 0xef, 0x7d, 0xdf, 0xbb, 0xef, 0xdd, 0x81,
	0x26, 0xe2, 0x4c, 0x08, 0x07, 0x31, 0x8e, 0x1d, 0x42, 0x89, 0x24, 0x50, 0x32, 0xee, 0xc8, 0xe1,
	0x39, 0x16, 0xf6, 0x39, 0x67, 0x92, 0x19, 0xeb, 0x8a, 0x61, 0xa7, 0x0c, 0x7b, 0xc2, 0x30, 0xd7,
	0x23, 0x16, 0x31, 0x45, 0x70, 0xd2, 0xbf, 0x8c, 0x6b, 0x6e, 0x44, 0x8c, 0x45, 0x31, 0x76, 0x54,
	0xd5, 0x4f, 0x8e, 0x1d, 0x48, 0x87, 0x39, 0x54, 0x97, 0x98, 0x1e, 0x61, 0x7e, 0x46, 0xa8, 0x74,
	0x60, 0x1f, 0x91, 0xe2, 0x0c, 0x73, 0xa3, 0xe0, 0x42, 0x0e, 0x6e, 0x41, 0x56, 0x01, 0x82, 0x08,
	0xb1, 0x84, 0xca, 0x22, 0xbe, 0xf9, 0xa5, 0x04, 0xd6, 0x3a, 0x8c, 0x4a, 0x0e, 0x91, 0x0c, 0x38,
	0xa4, 0x02, 0x22, 0x49, 0x18, 0x35, 0x5e, 0x81, 0x35, 0xa5, 0x0c, 0xd1, 0x09, 0x24, 0x34, 0xfd,
	0x52, 0x8a, 0xe3, 0x9a, 0xde, 0xd4, 0xb7, 0x96, 0xb7, 0xd7, 0xed, 0xcc, 0xa8, 0x3d, 0x36, 0x6a,
	0xb7, 0xe8, 0xb0, 0x5d, 0xbe, 0xb8, 0x6a, 0xe8, 0xfe, 0xaa, 0x92, 0x75, 0x52, 0x55, 0x27, 0x13,
	0x19, 0x87, 0xe0, 0x3f, 0x41, 0x22, 0x8a, 0xb9, 0xa8, 0xcd, 0x35, 0x4b, 0x5b, 0x95, 0xf6, 0x8b,
	0x9b, 0xab, 0xc6, 0xb3, 0x88, 0xc8, 0x93, 0xa4, 0x6f, 0x23, 0x76, 0xe6, 0x1c, 0x41, 0x09, 0xd5,
	0x9c, 0x18, 0xf6, 0x9d, 0xcc, 0xf0, 0x60, 0x96, 0xe5, 0x56, 0x56, 0xb9, 0xbb, 0xfe, 0xb8, 0xa1,
	0x11, 0x82, 0x25, 0x04, 0xe3, 0x38, 0x24, 0xf4, 0x98, 0xd5, 0x4a, 0x4d, 0x7d, 0xab, 0xd2, 0x6e,
	0xdf, 0x5c, 0x35, 0x76, 0xee, 0xd4, 0x7d, 0xb2, 0xab, 0xf1, 0x06, 0x3a, 0x30, 0x8e, 0x5d, 0x7a,
	0xcc, 0xfc, 0x45, 0x94, 0xff, 0x19, 0xcf, 0x41, 0x85, 0x63, 0x99, 0x70, 0x1a, 0x7e, 0x84, 0x71,
	0x82, 0x6b, 0x65, 0xb5, 0x01, 0xd3, 0x2e, 0xc4, 0x2a, 0x07, 0xb6, 0xaf, 0x28, 0x07, 0x29, 0xc3,
	0x5f, 0xe6, 0x7f, 0x0b, 0xe3, 0x09, 0x98, 0x8f, 0x09, 0x3d, 0x15, 0xb5, 0xf9, 0x66, 0x69, 0x5a,
	0x37, 0xb9, 0x0e, 0xf6, 0x1b, 0x42, 0x4f, 0xd5, 0xfe, 0x34, 0x3f, 0xa3, 0x3f, 0x2d, 0xff, 0xfe,
	0xda, 0xd0, 0x36, 0xef, 0x83, 0x72, 0x0a, 0x19, 0x75, 0xb0, 0x24, 0x38, 0x0a, 0x09, 0x3d, 0xc2,
	0x03, 0x95, 0xc1, 0xff, 0xfe, 0xa2, 0xe0, 0xc8, 0x4d, 0xeb, 0xcd, 0xef, 0x3a, 0xb8, 0xe7, 0x66,
	0xad, 0x70, 0x30, 0xe8, 0x49, 0x28, 0xb1, 0xb1, 0x03, 0x16, 0x84, 0x84, 0x32, 0x11, 0x8a, 0xbd,
	0xb2, 0xfd, 0x60, 0xf6, 0xdc, 0xdb, 0xb2, 0x44, 0xf8, 0xb9, 0xca, 0xf0, 0xc0, 0x2a, 0xc7, 0x67,
	0x90, 0x50, 0x42, 0xa3, 0xb0, 0x18, 0xde, 0xf2, 0x76, 0xbd, 0xd8, 0x2a, 0xcf, 0x67, 0x9c, 0x4c,
	0x7e, 0x86, 0xea, 0x44, 0xdb, 0xcb, 0xa4, 0xf9, 0x71, 0x56, 0x40, 0x65, 0x0f, 0x53, 0x2c, 0x88,
	0x50, 0x2e, 0x1f, 0x0e, 0x41, 0x75, 0xda, 0x81, 0x61, 0x01, 0xd3, 0xf5, 0xdc, 0xc0, 0x6d, 0x05,
	0xdd, 0x30, 0xf8, 0x10, 0xf6, 0x82, 0x56, 0xb0, 0xdf, 0x0b, 0xf7, 0xbd, 0xd7, 0xde, 0xdb, 0xf7,
	0x5e, 0x55, 0xfb, 0x07, 0xfe, 0xae, 0xeb, 0xed, 0xba, 0xde, 0x5e, 0x55, 0x37, 0x1a, 0xa0, 0x3e,
	0x03, 0x3f, 0xe8, 0xfa, 0xee, 0x4b, 0xb7, 0xbb, 0x5b, 0x9d, 0x33, 0xcb, 0x9f, 0xbe, 0x59, 0x5a,
	0xdb, 0xbf, 0xf8, 0x65, 0x69, 0x17, 0xd7, 0x96, 0x7e, 0x79, 0x6d, 0xe9, 0x3f, 0xaf, 0x2d, 0xfd,
	0xf3, 0xc8, 0xd2, 0x2e, 0x47, 0x96, 0xf6, 0x63, 0x64, 0x69, 0x87, 0x8f, 0xef, 0x74, 0x7d, 0xa6,
	0x1e, 0x7c, 0x7f, 0x41, 0x3d, 0x87, 0x47, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x45, 0x62,
	0x6f, 0x15, 0x04, 0x00, 0x00,
}

func (m *ContractTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ReturnValue != nil {
		{
			size, err := m.ReturnValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CallInfo) > 0 {
		i -= len(m.CallInfo)
		copy(dAtA[i:], m.CallInfo)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CallInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CrossChainChannel != nil {
		{
			size, err := m.CrossChainChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Link) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SrcIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SrcIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InitiateTxState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateTxState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitiateTxState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemainingSigners) > 0 {
		for iNdEx := len(m.RemainingSigners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemainingSigners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrossChainChannel != nil {
		l = m.CrossChainChannel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CallInfo)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ReturnValue != nil {
		l = m.ReturnValue.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcIndex != 0 {
		n += 1 + sovTypes(uint64(m.SrcIndex))
	}
	return n
}

func (m *InitiateTxState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.RemainingSigners) > 0 {
		for _, e := range m.RemainingSigners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainChannel == nil {
				m.CrossChainChannel = &types.Any{}
			}
			if err := m.CrossChainChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallInfo = append(m.CallInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.CallInfo == nil {
				m.CallInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReturnValue == nil {
				m.ReturnValue = &types1.ReturnValue{}
			}
			if err := m.ReturnValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, Link{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIndex", wireType)
			}
			m.SrcIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateTxState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateTxState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateTxState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InitiateTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingSigners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingSigners = append(m.RemainingSigners, types2.Account{})
			if err := m.RemainingSigners[len(m.RemainingSigners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
