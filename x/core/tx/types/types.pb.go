// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/core/tx/types.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	github_com_datachainlab_cross_x_core_account_types "github.com/datachainlab/cross/x/core/account/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types2 "github.com/tendermint/tendermint/abci/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommitProtocol int32

const (
	COMMIT_PROTOCOL_UNKNOWN CommitProtocol = 0
	COMMIT_PROTOCOL_SIMPLE  CommitProtocol = 1
	COMMIT_PROTOCOL_TPC     CommitProtocol = 2
)

var CommitProtocol_name = map[int32]string{
	0: "COMMIT_PROTOCOL_UNKNOWN",
	1: "COMMIT_PROTOCOL_SIMPLE",
	2: "COMMIT_PROTOCOL_TPC",
}

var CommitProtocol_value = map[string]int32{
	"COMMIT_PROTOCOL_UNKNOWN": 0,
	"COMMIT_PROTOCOL_SIMPLE":  1,
	"COMMIT_PROTOCOL_TPC":     2,
}

func (x CommitProtocol) String() string {
	return proto.EnumName(CommitProtocol_name, int32(x))
}

func (CommitProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d7f910431c1db8, []int{0}
}

type Tx struct {
	Id                   TxID                          `protobuf:"bytes,1,opt,name=id,proto3,casttype=TxID" json:"id,omitempty"`
	CommitProtocol       CommitProtocol                `protobuf:"varint,2,opt,name=commit_protocol,json=commitProtocol,proto3,enum=cross.core.tx.CommitProtocol" json:"commit_protocol,omitempty"`
	ContractTransactions []ResolvedContractTransaction `protobuf:"bytes,3,rep,name=contract_transactions,json=contractTransactions,proto3" json:"contract_transactions"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types.Height `protobuf:"bytes,4,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,5,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d7f910431c1db8, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

type ResolvedContractTransaction struct {
	CrossChainChannel *types1.Any                                                    `protobuf:"bytes,1,opt,name=cross_chain_channel,json=crossChainChannel,proto3" json:"cross_chain_channel,omitempty"`
	Signers           []github_com_datachainlab_cross_x_core_account_types.AccountID `protobuf:"bytes,2,rep,name=signers,proto3,casttype=github.com/datachainlab/cross/x/core/account/types.AccountID" json:"signers,omitempty"`
	CallInfo          ContractCallInfo                                               `protobuf:"bytes,3,opt,name=call_info,json=callInfo,proto3,casttype=ContractCallInfo" json:"call_info,omitempty"`
	ReturnValue       *ReturnValue                                                   `protobuf:"bytes,4,opt,name=return_value,json=returnValue,proto3" json:"return_value,omitempty"`
	Objects           []types1.Any                                                   `protobuf:"bytes,5,rep,name=objects,proto3" json:"objects"`
}

func (m *ResolvedContractTransaction) Reset()         { *m = ResolvedContractTransaction{} }
func (m *ResolvedContractTransaction) String() string { return proto.CompactTextString(m) }
func (*ResolvedContractTransaction) ProtoMessage()    {}
func (*ResolvedContractTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d7f910431c1db8, []int{1}
}
func (m *ResolvedContractTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedContractTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedContractTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedContractTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedContractTransaction.Merge(m, src)
}
func (m *ResolvedContractTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedContractTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedContractTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedContractTransaction proto.InternalMessageInfo

type ReturnValue struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ReturnValue) Reset()         { *m = ReturnValue{} }
func (m *ReturnValue) String() string { return proto.CompactTextString(m) }
func (*ReturnValue) ProtoMessage()    {}
func (*ReturnValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d7f910431c1db8, []int{2}
}
func (m *ReturnValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnValue.Merge(m, src)
}
func (m *ReturnValue) XXX_Size() int {
	return m.Size()
}
func (m *ReturnValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnValue.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnValue proto.InternalMessageInfo

// ConstantValueObject is an Object wraps a constant value
type ConstantValueObject struct {
	CrossChainChannel types1.Any `protobuf:"bytes,1,opt,name=cross_chain_channel,json=crossChainChannel,proto3" json:"cross_chain_channel"`
	K                 []byte     `protobuf:"bytes,2,opt,name=k,proto3" json:"k,omitempty"`
	V                 []byte     `protobuf:"bytes,3,opt,name=v,proto3" json:"v,omitempty"`
}

func (m *ConstantValueObject) Reset()         { *m = ConstantValueObject{} }
func (m *ConstantValueObject) String() string { return proto.CompactTextString(m) }
func (*ConstantValueObject) ProtoMessage()    {}
func (*ConstantValueObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d7f910431c1db8, []int{3}
}
func (m *ConstantValueObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstantValueObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstantValueObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstantValueObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstantValueObject.Merge(m, src)
}
func (m *ConstantValueObject) XXX_Size() int {
	return m.Size()
}
func (m *ConstantValueObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstantValueObject.DiscardUnknown(m)
}

var xxx_messageInfo_ConstantValueObject proto.InternalMessageInfo

type ContractCallResult struct {
	Data   []byte         `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Events []types2.Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events"`
}

func (m *ContractCallResult) Reset()         { *m = ContractCallResult{} }
func (m *ContractCallResult) String() string { return proto.CompactTextString(m) }
func (*ContractCallResult) ProtoMessage()    {}
func (*ContractCallResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d7f910431c1db8, []int{4}
}
func (m *ContractCallResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallResult.Merge(m, src)
}
func (m *ContractCallResult) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallResult.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallResult proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cross.core.tx.CommitProtocol", CommitProtocol_name, CommitProtocol_value)
	proto.RegisterType((*Tx)(nil), "cross.core.tx.Tx")
	proto.RegisterType((*ResolvedContractTransaction)(nil), "cross.core.tx.ResolvedContractTransaction")
	proto.RegisterType((*ReturnValue)(nil), "cross.core.tx.ReturnValue")
	proto.RegisterType((*ConstantValueObject)(nil), "cross.core.tx.ConstantValueObject")
	proto.RegisterType((*ContractCallResult)(nil), "cross.core.tx.ContractCallResult")
}

func init() { proto.RegisterFile("cross/core/tx/types.proto", fileDescriptor_24d7f910431c1db8) }

var fileDescriptor_24d7f910431c1db8 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xea, 0x46,
	0x14, 0xb5, 0x81, 0x7c, 0x74, 0x20, 0x94, 0x4c, 0x48, 0xe2, 0x90, 0xc6, 0x46, 0x74, 0x83, 0x22,
	0xd5, 0x56, 0x68, 0x56, 0x51, 0x2b, 0x35, 0x38, 0xa9, 0x4a, 0xf3, 0x01, 0x9a, 0xd2, 0x56, 0xca,
	0xa2, 0xee, 0x78, 0x98, 0x80, 0x1b, 0x33, 0x13, 0xd9, 0x03, 0x82, 0x45, 0xa5, 0x2e, 0xbb, 0xec,
	0x4f, 0xa8, 0xd4, 0x3f, 0x93, 0x65, 0x96, 0x5d, 0xa1, 0x36, 0xd9, 0x74, 0x9d, 0xee, 0xb2, 0x7a,
	0xf2, 0xd8, 0x24, 0x81, 0xf7, 0xa1, 0xa7, 0xb7, 0x81, 0xb9, 0x73, 0xce, 0x3d, 0xbe, 0x73, 0xef,
	0x99, 0x01, 0x5b, 0x24, 0xe0, 0x61, 0x68, 0x11, 0x1e, 0x50, 0x4b, 0x8c, 0x2c, 0x31, 0xbe, 0xa6,
	0xa1, 0x79, 0x1d, 0x70, 0xc1, 0xe1, 0x8a, 0x84, 0xcc, 0x08, 0x32, 0xc5, 0xa8, 0x54, 0xec, 0xf2,
	0x2e, 0x97, 0x88, 0x15, 0xad, 0x62, 0x52, 0x69, 0xab, 0xcb, 0x79, 0xd7, 0xa7, 0x96, 0x8c, 0xdc,
	0xc1, 0xa5, 0x85, 0xd9, 0x38, 0x81, 0xb6, 0x05, 0x65, 0x1d, 0x1a, 0xf4, 0x3d, 0x26, 0x2c, 0xec,
	0x12, 0xef, 0xa5, 0x78, 0xc9, 0xf0, 0x5c, 0x12, 0x7f, 0x95, 0xf8, 0x1e, 0x65, 0xc2, 0x1a, 0xee,
	0x25, 0xab, 0x98, 0x50, 0xf9, 0x2d, 0x0d, 0x52, 0xed, 0x11, 0xd4, 0x40, 0xca, 0xeb, 0x68, 0x6a,
	0x59, 0xad, 0xe6, 0xea, 0xcb, 0x8f, 0x13, 0x23, 0xd3, 0x1e, 0x35, 0x8e, 0x50, 0xca, 0xeb, 0xc0,
	0xaf, 0xc1, 0xc7, 0x84, 0xf7, 0xfb, 0x9e, 0x70, 0x64, 0x02, 0xe1, 0xbe, 0x96, 0x2a, 0xab, 0xd5,
	0x7c, 0x6d, 0xc7, 0x9c, 0x29, 0xdc, 0xb4, 0x25, 0xab, 0x95, 0x90, 0x50, 0x9e, 0xcc, 0xc4, 0x90,
	0x82, 0x75, 0xc2, 0x99, 0x08, 0x30, 0x11, 0x8e, 0x08, 0x30, 0x0b, 0x31, 0x11, 0x1e, 0x67, 0xa1,
	0x96, 0x2e, 0xa7, 0xab, 0xd9, 0xda, 0xee, 0x9c, 0x1a, 0xa2, 0x21, 0xf7, 0x87, 0xb4, 0x63, 0x27,
	0x39, 0xed, 0xe7, 0x94, 0x7a, 0xe6, 0x66, 0x62, 0x28, 0xa8, 0x48, 0x5e, 0x87, 0x42, 0xf8, 0x33,
	0xc8, 0x0b, 0xaf, 0x4f, 0xf9, 0x40, 0x38, 0x3d, 0xea, 0x75, 0x7b, 0x42, 0xcb, 0x94, 0xd5, 0x6a,
	0xb6, 0x56, 0x32, 0x3d, 0x97, 0xc4, 0xea, 0xc9, 0xf9, 0x87, 0x7b, 0xe6, 0x37, 0x92, 0x51, 0xdf,
	0x89, 0xf4, 0x1e, 0x26, 0xc6, 0xfa, 0x18, 0xf7, 0xfd, 0x83, 0xca, 0x6c, 0x7e, 0x05, 0xad, 0x24,
	0x1b, 0x31, 0x1b, 0x36, 0xc0, 0xea, 0x94, 0x11, 0xfd, 0x87, 0x02, 0xf7, 0xaf, 0xb5, 0x85, 0xb2,
	0x5a, 0xcd, 0xd4, 0x3f, 0x79, 0x98, 0x18, 0xda, 0xac, 0xc8, 0x13, 0xa5, 0x82, 0x0a, 0xc9, 0x5e,
	0x7b, 0xba, 0x75, 0x90, 0xf9, 0xef, 0x4f, 0x43, 0xa9, 0xfc, 0x9f, 0x02, 0xdb, 0xef, 0x38, 0x2e,
	0xfc, 0x16, 0xac, 0xc9, 0xde, 0x38, 0xa4, 0x87, 0x3d, 0x16, 0xfd, 0x32, 0x46, 0x7d, 0x39, 0xac,
	0x6c, 0xad, 0x68, 0xc6, 0xce, 0x30, 0xa7, 0xce, 0x30, 0x0f, 0xd9, 0x58, 0x76, 0x48, 0x45, 0xab,
	0x32, 0xcd, 0x8e, 0xb2, 0xec, 0x38, 0x09, 0x5e, 0x80, 0xa5, 0xd0, 0xeb, 0x32, 0x1a, 0x84, 0x5a,
	0xaa, 0x9c, 0xae, 0xe6, 0xea, 0x5f, 0x3d, 0x4e, 0x8c, 0x2f, 0xba, 0x9e, 0xe8, 0x0d, 0x5c, 0x93,
	0xf0, 0xbe, 0xd5, 0xc1, 0x02, 0xcb, 0xef, 0xf8, 0xd8, 0xb5, 0x62, 0xd3, 0x8e, 0x62, 0x03, 0x61,
	0x42, 0xf8, 0x80, 0x89, 0xc4, 0x5e, 0x87, 0x71, 0xd4, 0x38, 0x42, 0x53, 0x41, 0xb8, 0x07, 0x3e,
	0x22, 0xd8, 0xf7, 0x1d, 0x8f, 0x5d, 0x72, 0x2d, 0x2d, 0xad, 0x54, 0x7c, 0x9c, 0x18, 0x85, 0xe9,
	0x99, 0x6c, 0xec, 0xfb, 0x0d, 0x76, 0xc9, 0xd1, 0x32, 0x49, 0x56, 0xf0, 0x4b, 0x90, 0x0b, 0xa8,
	0x18, 0x04, 0xcc, 0x19, 0x62, 0x7f, 0x40, 0x9f, 0x66, 0x35, 0xef, 0x85, 0x88, 0xf2, 0x43, 0xc4,
	0x40, 0xd9, 0xe0, 0x39, 0x80, 0xfb, 0x60, 0x89, 0xbb, 0xbf, 0x50, 0x22, 0x42, 0x6d, 0x41, 0xba,
	0xe8, 0xed, 0xdd, 0x50, 0xd0, 0x94, 0x9a, 0x74, 0xfd, 0x53, 0x90, 0x7d, 0xa1, 0x0b, 0x8b, 0x60,
	0x21, 0x2e, 0x41, 0xde, 0x01, 0x14, 0x07, 0x95, 0x5f, 0xc1, 0x9a, 0xcd, 0x59, 0x28, 0x30, 0x13,
	0x92, 0xd6, 0x94, 0x12, 0x1f, 0x3a, 0x11, 0xe5, 0x4d, 0x13, 0xc9, 0x01, 0xf5, 0x4a, 0xde, 0xa8,
	0x1c, 0x52, 0xaf, 0xa2, 0x68, 0x18, 0xf7, 0x0e, 0xa9, 0xc3, 0xca, 0x4f, 0x00, 0xbe, 0x6c, 0x1e,
	0xa2, 0xe1, 0xc0, 0x17, 0x10, 0x82, 0x4c, 0x34, 0xa5, 0xa4, 0x52, 0xb9, 0x86, 0xfb, 0x60, 0x91,
	0x0e, 0x29, 0x13, 0xf1, 0x58, 0xb3, 0xb5, 0x0d, 0xf3, 0xf9, 0x55, 0x30, 0xa3, 0x57, 0xc1, 0x3c,
	0x8e, 0xe0, 0xa4, 0x8c, 0x84, 0xbb, 0xdb, 0x03, 0xf9, 0xd9, 0x5b, 0x0b, 0xb7, 0xc1, 0xa6, 0xdd,
	0x3c, 0x3b, 0x6b, 0xb4, 0x9d, 0x16, 0x6a, 0xb6, 0x9b, 0x76, 0xf3, 0xd4, 0xf9, 0xfe, 0xfc, 0xe4,
	0xbc, 0xf9, 0xe3, 0x79, 0x41, 0x81, 0x25, 0xb0, 0x31, 0x0f, 0x7e, 0xd7, 0x38, 0x6b, 0x9d, 0x1e,
	0x17, 0x54, 0xb8, 0x09, 0xd6, 0xe6, 0xb1, 0x76, 0xcb, 0x2e, 0xa4, 0x4a, 0x99, 0xdf, 0xff, 0xd2,
	0x95, 0xfa, 0xc9, 0xcd, 0xbf, 0xba, 0x72, 0x73, 0xa7, 0xab, 0xb7, 0x77, 0xba, 0xfa, 0xcf, 0x9d,
	0xae, 0xfe, 0x71, 0xaf, 0x2b, 0xb7, 0xf7, 0xba, 0xf2, 0xf7, 0xbd, 0xae, 0x5c, 0x7c, 0xf6, 0x5e,
	0x06, 0x9c, 0xbe, 0x9b, 0xee, 0xa2, 0xec, 0xec, 0xe7, 0xaf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x29,
	0xda, 0xc8, 0x31, 0x55, 0x05, 0x00, 0x00,
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ContractTransactions) > 0 {
		for iNdEx := len(m.ContractTransactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractTransactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CommitProtocol != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CommitProtocol))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedContractTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedContractTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedContractTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ReturnValue != nil {
		{
			size, err := m.ReturnValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CallInfo) > 0 {
		i -= len(m.CallInfo)
		copy(dAtA[i:], m.CallInfo)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CallInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CrossChainChannel != nil {
		{
			size, err := m.CrossChainChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReturnValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConstantValueObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstantValueObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstantValueObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.V) > 0 {
		i -= len(m.V)
		copy(dAtA[i:], m.V)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.V)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.K) > 0 {
		i -= len(m.K)
		copy(dAtA[i:], m.K)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.K)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.CrossChainChannel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CommitProtocol != 0 {
		n += 1 + sovTypes(uint64(m.CommitProtocol))
	}
	if len(m.ContractTransactions) > 0 {
		for _, e := range m.ContractTransactions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTypes(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *ResolvedContractTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrossChainChannel != nil {
		l = m.CrossChainChannel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CallInfo)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ReturnValue != nil {
		l = m.ReturnValue.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReturnValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ConstantValueObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrossChainChannel.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ContractCallResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitProtocol", wireType)
			}
			m.CommitProtocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitProtocol |= CommitProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTransactions = append(m.ContractTransactions, ResolvedContractTransaction{})
			if err := m.ContractTransactions[len(m.ContractTransactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedContractTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedContractTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedContractTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainChannel == nil {
				m.CrossChainChannel = &types1.Any{}
			}
			if err := m.CrossChainChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallInfo = append(m.CallInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.CallInfo == nil {
				m.CallInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReturnValue == nil {
				m.ReturnValue = &ReturnValue{}
			}
			if err := m.ReturnValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, types1.Any{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstantValueObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstantValueObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstantValueObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrossChainChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = append(m.V[:0], dAtA[iNdEx:postIndex]...)
			if m.V == nil {
				m.V = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, types2.Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
